     async fn on_change(&self, params: TextDocumentItem) {
         let rope = ropey::Rope::from_str(&params.text);
         self.document_map
             .insert(params.uri.to_string(), rope.clone());
         let ParserResult {
             ast,
             parse_errors,
             semantic_tokens,
         } = parse(&params.text);
         let diagnostics = parse_errors
             .into_iter()
             .filter_map(|item| {
                 let (message, span) = match item.reason() {
                     chumsky::error::SimpleReason::Unclosed { span, delimiter } => {
                         (format!("Unclosed delimiter {}", delimiter), span.clone())
                     }
                     chumsky::error::SimpleReason::Unexpected => (
                         format!(
                             "{}, expected {}",
                             if item.found().is_some() {
                                 "Unexpected token in input"
                             } else {
                                 "Unexpected end of input"
                             },
                             if item.expected().len() == 0 {
                                 "something else".to_string()
                             } else {
                                 item.expected()
                                     .map(|expected| match expected {
                                         Some(expected) => expected.to_string(),
                                         None => "end of input".to_string(),
                                     })
                                     .collect::<Vec<_>>()
                                     .join(", ")
                             }
                         ),
                         item.span(),
                     ),
                     chumsky::error::SimpleReason::Custom(msg) => (msg.to_string(), item.span()),
                 };

                 || -> Option<Diagnostic> {
                      let start_line = rope.try_char_to_line(span.start)?;
                      let first_char = rope.try_line_to_char(start_line)?;
                      let start_column = span.start - first_char;
                     let start_position = offset_to_position(span.start, &rope)?;
                     let end_position = offset_to_position(span.end, &rope)?;
                      let end_line = rope.try_char_to_line(span.end)?;
                      let first_char = rope.try_line_to_char(end_line)?;
                      let end_column = span.end - first_char;
                     Some(Diagnostic::new_simple(
                         Range::new(start_position, end_position),
                         message,
                     ))
                 }()
             })
             .collect::<Vec<_>>();

         self.client
             .publish_diagnostics(params.uri.clone(), diagnostics, Some(params.version))
             .await;

         if let Some(ast) = ast {
             self.ast_map.insert(params.uri.to_string(), ast);
         }
          self.client
              .log_message(MessageType::INFO, &format!("{:?}", semantic_tokens))
              .await;
         self.semantic_token_map
             .insert(params.uri.to_string(), semantic_tokens);
     }