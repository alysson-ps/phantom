WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ ("//" | "#") ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

variable   = { "$" ~ identifier }

number  = { ASCII_DIGIT ~ (".")? ~ ASCII_DIGIT* }

single_quotes = _{ PUSH("'") ~ (!(PEEK) ~ ANY)* ~ POP }
double_quotes = _{ PUSH("\"") ~ (!(PEEK) ~ ANY)* ~ POP }
string  = { single_quotes | double_quotes }

boolean = { "true" | "false" }

primary = _{ number | string | boolean }

items = _{ primary ~ ("," ~ primary)* }
array = { "[" ~ items? ~ "]"}

args = { expression ~ ("," ~ expression)* }
instance = { "new" ~ identifier ~ "(" ~ args? ~ ")" }

// heredoc = { "<<<" ~ PUSH("EOT") ~ content ~ POP }
// content = { (!(PEEK) ~ ANY)* }

semicolon = { ";" }
equals    = { "=" }
// lparen    = { "(" }
// rparen    = { ")" }
// lbrace    = { "{" }
// rbrace    = { "}" }

safety_variable = { variable ~ "?" }

operator = { "*" | "+" | "-" | "/" }

type = { "int" | "float" | "string" }

// optional_type = { "?" ~ type }
union_type = _{ type ~ ("|" ~ type)* }

types = { union_type }

return_type = { ":" ~ types }

object = _{ variable ~ "->" ~ identifier }
static = _{ identifier ~ "::" ~ identifier }

call = { object | static }

parameter  = { types? ~ assignment}
parameters = { parameter ~ ("," ~ parameter)* }

fn_arrow = { "fn" ~ "(" ~ parameters? ~ ")" ~ "=>" ~ expression }

base_expression = _{ (variable | safety_variable | call | fn_arrow) | primary | array | instance  }
expression = { base_expression ~ (operator ~ base_expression)* }

visibility = { "public" | "private" | "protected" }
property = { visibility ~ "readonly"? ~ types? ~ variable }

property_assignment = _{ property ~ (equals ~ expression)? }
variable_assignment = _{ variable ~ (equals ~ expression)? }
object_assignment = _{ object ~ equals ~ expression }

assignment = _{object_assignment | variable_assignment | property_assignment }

declaration = { visibility ~ function }

return = _{ "return" ~ expression }

alias = { "as" ~ identifier }
path = { identifier ~ ("\\" ~ (identifier))* }

namespace = { "namespace" ~ path}

import = { "use" ~ path ~ alias? }

// arrow_statement = { (call | identifier | string | number) ~ "=>" ~ complex }

statement  = { (namespace | import | assignment | return | expression ) ~ semicolon ~ WHITESPACE* ~ COMMENT? }

function   = { "function" ~ ("__")? ~ identifier ~ "(" ~ parameters? ~ ")" ~ return_type? ~ "{" ~ statements ~ "}" }


extends = { "extends" ~ identifier }
implements = { "implements" ~ identifier }
class = { "class" ~ identifier ~ extends? ~ implements ~ "{" ~ statements ~ "}" }

enum_item = _{ identifier ~ ("," ~ identifier)* }
enum = { "enum" ~ identifier ~ "{" ~ enum_item ~ "}"}

// match = { "match" ~ lparen ~ variable ~ rparen ~ lbrace ~ statement ~ rbrace }

statements = { (statement | function | class | enum | declaration | COMMENT | WHITESPACE)* }
php_open = { "<?php" }
php_close = { "?>" }
php_block  = _{ php_open ~ statements ~ php_close? }

program = { SOI ~ php_block ~ EOI }
